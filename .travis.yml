language: cpp
sudo: true
dist: trusty

matrix:
  include:
  # OSX / Clang

  - os: osx
    osx_image: xcode8.3

  - os: osx
    osx_image: xcode9

  - os: osx
    osx_image: xcode9.1

  - os: osx
    osx_image: xcode9.2

  - os: osx
    osx_image: xcode9.3

  - os: osx
    osx_image: xcode9.4

  - os: osx
    osx_image: xcode10

  - os: osx
    osx_image: xcode10.1

  # Linux / GCC

  - os: linux
    compiler: gcc
    env:
      - compiler=g++-4.8
      - CXXFLAGS=-Wl,--no-as-needed
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-4.8', 'ninja-build']

  - os: linux
    compiler: gcc
    env:
      - compiler=g++-4.9
      - CXXFLAGS=-Wl,--no-as-needed
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-4.9', 'ninja-build']

  - os: linux
    compiler: gcc
    env:
      - COMPILER=g++-5
      - GSLAM_UPDATE_DOC=ON
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-5', 'ninja-build']

  - os: linux
    compiler: gcc
    env: COMPILER=g++-6
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-6', 'ninja-build']

  - os: linux
    compiler: gcc
    env: COMPILER=g++-7
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-7', 'ninja-build']

  - os: linux
    compiler: gcc
    env: COMPILER=g++-8
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-8', 'ninja-build']

  - os: linux
    compiler: gcc
    env:
      - COMPILER=g++-8
      - CXXFLAGS=-std=c++17
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-8', 'ninja-build']

  # Linux / Clang

  - os: linux
    compiler: clang
    env: COMPILER=clang++-3.7
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-precise-3.7']
        packages: ['g++-6', 'clang-3.7', 'ninja-build']

  - os: linux
    compiler: clang
    env: COMPILER=clang++-3.8
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-6', 'clang-3.8', 'ninja-build']

  - os: linux
    compiler: clang
    env: COMPILER=clang++-3.9
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-6', 'clang-3.9', 'ninja-build']

  - os: linux
    compiler: clang
    env: COMPILER=clang++-4.0
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-4.0']
        packages: ['g++-6', 'clang-4.0', 'ninja-build']

  - os: linux
    compiler: clang
    env: COMPILER=clang++-5.0
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-5.0']
        packages: ['g++-6', 'clang-5.0', 'ninja-build']

  - os: linux
    compiler: clang
    env: COMPILER=clang++-6.0
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-6.0']
        packages: ['g++-6', 'clang-6.0', 'ninja-build']

  - os: linux
    compiler: clang
    env: COMPILER=clang++-7
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-7']
        packages: ['g++-6', 'clang-7', 'ninja-build']

  - os: linux
    compiler: clang
    env:
      - COMPILER=clang++-7
      - CXXFLAGS=-std=c++1z
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-7']
        packages: ['g++-6', 'clang-7', 'ninja-build']


cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps
    - ${TRAVIS_BUILD_DIR}/build

before_script:
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew install \
        cmake  \
        eigen \
        glog \
        gflags \
        suite-sparse \
        ceres-solver \
        qt5 \
        glew || true
      export CMAKE_OPTIONS="-DCMAKE_RUNTIME_OUTPUT_DIRECTORY=bin -DIPO_ENABLED=OFF -DQt5_DIR=/usr/local/opt/qt5/lib/cmake/Qt5 -DQt5Core_DIR=/usr/local/opt/qt5/lib/cmake/Qt5Core -DQt5OpenGL_DIR=/usr/local/opt/qt5/lib/cmake/Qt5OpenGL"
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      export DISPLAY=:99.0
      sh -e /etc/init.d/xvfb start
      sleep 3

      sudo add-apt-repository --yes ppa:beineri/opt-qt542-trusty
      sudo apt-get update -qq
      sudo apt-get -y install \
        qt54base libopencv-dev cmake build-essential libeigen3-dev libatlas-base-dev \
        libsuitesparse-dev libfreeimage-dev libgoogle-glog-dev libgflags-dev libglew-dev
    fi

script:  
  # make sure CXX is correctly set
  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi

  # show OS/compiler version
  - uname -a
  - $CXX --version
  - cmake --version

  # compile and execute unit tests
  - mkdir -p build && cd build
  - cmake .. ${CMAKE_OPTIONS} && cmake --build . --config Release
  - sudo make install
  - gslam tests
  
# Generate and deploy documentation
after_success:
  - cd $TRAVIS_BUILD_DIR/build
  - |
    if [[ "$GSLAM_UPDATE_DOC" != "" ]]; then
       sudo apt-get -y install doxygen doxygen-doc doxygen-latex doxygen-gui graphviz
       bash ../doc/update_github_doc.sh
    fi
